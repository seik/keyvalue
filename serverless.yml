service: keyvalue
useDotenv: true

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .vscode/**
    - .env
    - images/**
    - README.md
    - LICENSE
    - package.json
    - package-lock.json
    - requirements.txt

custom:
  appAcronym: keyvalue 
  dynamodbTable: keyvalue-${self:provider.stage}
  dynamodbArn: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodbTable}
  dynamodbHost: https://dynamodb.${self:provider.region}.amazonaws.com
  pythonRequirements:
    dockerizePip: true
    slim: false


provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-3'}
  environment:
    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}
    DYNAMODB_TABLE: ${self:custom.dynamodbTable}
    DYNAMODB_HOST: ${self:custom.dynamodbHost}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: ${self:custom.dynamodbArn}
  apiGateway:
    shouldStartNameWithService: true

functions:
  bot:
    handler: src.bot.handler
    events:
      - http: POST /

plugins:
  - serverless-python-requirements

resources:
  Resources:
    keyvalueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbTable}
        AttributeDefinitions:
          - AttributeName: id 
            AttributeType: S
        KeySchema:
          - AttributeName: id 
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1